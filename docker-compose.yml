version: '3.5'

services:
  rabbitmq:
    image: rabbitmq:4.0-management-alpine
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - .docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./.docker/rabbitmq/definitions.json:/etc/rabbitmq/definitons.json:ro
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_running']
      interval: 10s
      timeout: 5s
      retries: 5

  database-api:
    container_name: database-api
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/data/postgres
    volumes:
      - .docker/db/:/data/postgres
    ports:
      - '5432:5432'
    networks:
      - app-network

  database-api-test:
    container_name: database-api-test
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - .docker/testdb/:/data/postgres
    ports:
      - '5433:5432'
    networks:
      - app-network

  database-events:
    container_name: database-events
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/data/postgres
    volumes:
      - .docker/dbevents/:/data/postgres
    ports:
      - '5434:5432'
    networks:
      - app-network

  database-events-test:
    container_name: database-events-test
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - .docker/testdbevents/:/data/postgres
    ports:
      - '5435:5432'
    networks:
      - app-network

  crud-api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      args:
        - APP_WORKSPACE=apps/api
    container_name: crud-api
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  events-api:
    build:
      context: .
      dockerfile: apps/events/Dockerfile
      args:
        - APP_WORKSPACE=apps/events
    container_name: events-api
    ports:
      - '3001:3000'
    volumes:
      - .:/usr/src/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
